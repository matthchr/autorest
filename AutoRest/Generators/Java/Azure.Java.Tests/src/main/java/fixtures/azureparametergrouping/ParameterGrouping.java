/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.azureparametergrouping;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.POST;
import retrofit.http.Body;
import retrofit.http.Header;
import retrofit.http.Query;
import retrofit.http.Path;

/**
 * An instance of this class provides access to all the operations defined
 * in ParameterGrouping.
 */
public interface ParameterGrouping {
    /**
     * The interface defining all the services for ParameterGrouping to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ParameterGroupingService {
        @POST("/parameterGrouping/postRequired/{path}")
        Response postRequired(@Body int body, @Header("header") String headerParameter, @Query("query") Integer query, @Path("path") String path, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/parameterGrouping/postRequired/{path}")
        void postRequiredAsync(@Body int body, @Header("header") String headerParameter, @Query("query") Integer query, @Path("path") String path, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/parameterGrouping/postOptional")
        Response postOptional(@Header("header") String headerParameter, @Query("query") Integer query, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/parameterGrouping/postOptional")
        void postOptionalAsync(@Header("header") String headerParameter, @Query("query") Integer query, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/parameterGrouping/postMultipleParameterGroups")
        Response postMultipleParameterGroups(@Header("header-one") String headerOne, @Query("query-one") Integer queryOne, @Header("header-two") String headerTwo, @Query("query-two") Integer queryTwo, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/parameterGrouping/postMultipleParameterGroups")
        void postMultipleParameterGroupsAsync(@Header("header-one") String headerOne, @Query("query-one") Integer queryOne, @Header("header-two") String headerTwo, @Query("query-two") Integer queryTwo, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

    }
    /**
     * Post a bunch of required parameters grouped
     *
     * @param body the int value
     * @param path Path parameter
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postRequired(int body, String path, String headerParameter, Integer query) throws ServiceException;

    /**
     * Post a bunch of required parameters grouped
     *
     * @param body the int value
     * @param path Path parameter
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredAsync(int body, String path, String headerParameter, Integer query, final ServiceCallback<Void> serviceCallback);

    /**
     * Post a bunch of optional parameters grouped
     *
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptional(String headerParameter, Integer query) throws ServiceException;

    /**
     * Post a bunch of optional parameters grouped
     *
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalAsync(String headerParameter, Integer query, final ServiceCallback<Void> serviceCallback);

    /**
     * Post parameters from multiple different parameter groups
     *
     * @param headerOne the String value
     * @param queryOne Query parameter with default
     * @param headerTwo the String value
     * @param queryTwo Query parameter with default
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postMultipleParameterGroups(String headerOne, Integer queryOne, String headerTwo, Integer queryTwo) throws ServiceException;

    /**
     * Post parameters from multiple different parameter groups
     *
     * @param headerOne the String value
     * @param queryOne Query parameter with default
     * @param headerTwo the String value
     * @param queryTwo Query parameter with default
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postMultipleParameterGroupsAsync(String headerOne, Integer queryOne, String headerTwo, Integer queryTwo, final ServiceCallback<Void> serviceCallback);

}
