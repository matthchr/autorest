/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.azureparametergrouping;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.azureparametergrouping.models.Error;

public class ParameterGroupingImpl implements ParameterGrouping {
    private ParameterGroupingService service;
    AutoRestParameterGroupingTestService client;

    public ParameterGroupingImpl(RestAdapter restAdapter, AutoRestParameterGroupingTestService client) {
        this.service = restAdapter.create(ParameterGroupingService.class);
        this.client = client;
    }

    /**
     * Post a bunch of required parameters grouped
     *
     * @param body the int value
     * @param path Path parameter
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postRequired(int body, String path, String headerParameter, Integer query) throws ServiceException {
        if (path == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter path is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = postRequiredDelegate(service.postRequired(body, headerParameter, query, path, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postRequiredDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Post a bunch of required parameters grouped
     *
     * @param body the int value
     * @param path Path parameter
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredAsync(int body, String path, String headerParameter, Integer query, final ServiceCallback<Void> serviceCallback) {
        if (path == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter path is required and cannot be null.")));
        }
        service.postRequiredAsync(body, headerParameter, query, path, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postRequiredDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Post a bunch of optional parameters grouped
     *
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptional(String headerParameter, Integer query) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalDelegate(service.postOptional(headerParameter, query, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Post a bunch of optional parameters grouped
     *
     * @param headerParameter the String value
     * @param query Query parameter with default
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalAsync(String headerParameter, Integer query, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalAsync(headerParameter, query, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Post parameters from multiple different parameter groups
     *
     * @param headerOne the String value
     * @param queryOne Query parameter with default
     * @param headerTwo the String value
     * @param queryTwo Query parameter with default
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postMultipleParameterGroups(String headerOne, Integer queryOne, String headerTwo, Integer queryTwo) throws ServiceException {
        try {
            ServiceResponse<Void> response = postMultipleParameterGroupsDelegate(service.postMultipleParameterGroups(headerOne, queryOne, headerTwo, queryTwo, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postMultipleParameterGroupsDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Post parameters from multiple different parameter groups
     *
     * @param headerOne the String value
     * @param queryOne Query parameter with default
     * @param headerTwo the String value
     * @param queryTwo Query parameter with default
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postMultipleParameterGroupsAsync(String headerOne, Integer queryOne, String headerTwo, Integer queryTwo, final ServiceCallback<Void> serviceCallback) {
        service.postMultipleParameterGroupsAsync(headerOne, queryOne, headerTwo, queryTwo, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postMultipleParameterGroupsDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postMultipleParameterGroupsDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
