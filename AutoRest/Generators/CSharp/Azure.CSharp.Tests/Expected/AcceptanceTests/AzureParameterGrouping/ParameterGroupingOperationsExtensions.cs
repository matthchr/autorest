// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.Azure.AcceptanceTestsAzureParameterGrouping
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class ParameterGroupingOperationsExtensions
    {
            /// <summary>
            /// Post a bunch of required parameters grouped
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for the operation
            /// </param>
            public static void PostRequired(this IParameterGroupingOperations operations, ParameterGroupingPostRequiredParameters parameters)
            {
                Task.Factory.StartNew(s => ((IParameterGroupingOperations)s).PostRequiredAsync(parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a bunch of required parameters grouped
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostRequiredAsync( this IParameterGroupingOperations operations, ParameterGroupingPostRequiredParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostRequiredWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Post a bunch of optional parameters grouped
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for the operation
            /// </param>
            public static void PostOptional(this IParameterGroupingOperations operations, ParameterGroupingPostOptionalParameters parameters = default(ParameterGroupingPostOptionalParameters))
            {
                Task.Factory.StartNew(s => ((IParameterGroupingOperations)s).PostOptionalAsync(parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a bunch of optional parameters grouped
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostOptionalAsync( this IParameterGroupingOperations operations, ParameterGroupingPostOptionalParameters parameters = default(ParameterGroupingPostOptionalParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostOptionalWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
