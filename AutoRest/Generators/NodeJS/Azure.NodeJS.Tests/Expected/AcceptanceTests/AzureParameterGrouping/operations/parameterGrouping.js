/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var msRestAzure = require('ms-rest-azure');
var ServiceClient = msRest.ServiceClient;
var WebResource = msRest.WebResource;

var models = require('../models');

/**
 * @class
 * ParameterGrouping
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestParameterGroupingTestService.
 * Initializes a new instance of the ParameterGrouping class.
 * @constructor
 *
 * @param {AutoRestParameterGroupingTestService} client Reference to the service client.
 */
function ParameterGrouping(client) {
  this.client = client;
}

/**
 * Post a bunch of required parameters grouped
 *
 * @param {object} parameters Additional parameters for the operation
 * 
 * @param {number} [parameters.body]
 * 
 * @param {string} [parameters.header]
 * 
 * @param {number} [parameters.query] Query parameter with default
 * 
 * @param {string} [parameters.path] Path parameter
 * 
 * @param {object} [options]
 *
 * @param {object} [options.customHeaders] headers that will be added to
 * request
 *
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
ParameterGrouping.prototype.postRequired = function (parameters, options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  var parametersBody = (parameters ? parameters.body : undefined);
  var parametersHeader = (parameters ? parameters.header : undefined);
  var parametersQuery = (parameters ? parameters.query : undefined);
  var parametersPath = (parameters ? parameters.path : undefined);
  // Validate
  try {
    if (parametersBody === null || parametersBody === undefined || typeof parametersBody !== 'number') {
      throw new Error('parametersBody cannot be null or undefined and it must be of type number.');
    }
    if (parametersHeader !== null && parametersHeader !== undefined && typeof parametersHeader.valueOf() !== 'string') {
      throw new Error('parametersHeader must be of type string.');
    }
    if (parametersQuery !== null && parametersQuery !== undefined && typeof parametersQuery !== 'number') {
      throw new Error('parametersQuery must be of type number.');
    }
    if (parametersPath === null || parametersPath === undefined || typeof parametersPath.valueOf() !== 'string') {
      throw new Error('parametersPath cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var requestUrl = this.client.baseUri +
                   '//parameterGrouping/postRequired/{path}';
  requestUrl = requestUrl.replace('{path}', encodeURIComponent(parametersPath));
  var queryParameters = [];
  if (parametersQuery !== null && parametersQuery !== undefined) {
    queryParameters.push('query=' + encodeURIComponent(parametersQuery.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }
  // trim all duplicate forward slashes in the url
  var regex = /([^:]\/)\/+/gi;
  requestUrl = requestUrl.replace(regex, '$1');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  if (parametersHeader !== undefined && parametersHeader !== null) {
    httpRequest.headers['header'] = parametersHeader;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  var requestContent = null;
  var requestModel = null;
  try {
    if (parametersBody === null || parametersBody === undefined || typeof parametersBody !== 'number') {
      throw new Error('parametersBody cannot be null or undefined and it must be of type number.');
    }
    requestModel = parametersBody;
    requestContent = JSON.stringify(requestModel);
  } catch (error) {
    var serializationError = new Error(util.format('Error "%s" occurred in serializing the payload - "%s"', error, util.inspect(requestModel, {depth: null})));
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = httpRequest;
      error.response = response;
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        error.body = new client._models['ErrorModel']();
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          error.body.deserialize(parsedErrorResponse);
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
};

/**
 * Post a bunch of optional parameters grouped
 *
 * @param {object} [parameters] Additional parameters for the operation
 * 
 * @param {string} [parameters.header]
 * 
 * @param {number} [parameters.query] Query parameter with default
 * 
 * @param {object} [options]
 *
 * @param {object} [options.customHeaders] headers that will be added to
 * request
 *
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
ParameterGrouping.prototype.postOptional = function (parameters, options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  var parametersHeader = (parameters ? parameters.header : undefined);
  var parametersQuery = (parameters ? parameters.query : undefined);
  // Validate
  try {
    if (parametersHeader !== null && parametersHeader !== undefined && typeof parametersHeader.valueOf() !== 'string') {
      throw new Error('parametersHeader must be of type string.');
    }
    if (parametersQuery !== null && parametersQuery !== undefined && typeof parametersQuery !== 'number') {
      throw new Error('parametersQuery must be of type number.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var requestUrl = this.client.baseUri +
                   '//parameterGrouping/postOptional';
  var queryParameters = [];
  if (parametersQuery !== null && parametersQuery !== undefined) {
    queryParameters.push('query=' + encodeURIComponent(parametersQuery.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }
  // trim all duplicate forward slashes in the url
  var regex = /([^:]\/)\/+/gi;
  requestUrl = requestUrl.replace(regex, '$1');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  if (parametersHeader !== undefined && parametersHeader !== null) {
    httpRequest.headers['header'] = parametersHeader;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  httpRequest.headers['Content-Length'] = 0;
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = httpRequest;
      error.response = response;
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        error.body = new client._models['ErrorModel']();
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          error.body.deserialize(parsedErrorResponse);
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
};


module.exports = ParameterGrouping;
